// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class FlutterApiNewsEntity {
  FlutterApiNewsEntity({
    this.title,
  });

  String? title;

  Object encode() {
    return <Object?>[
      title,
    ];
  }

  static FlutterApiNewsEntity decode(Object result) {
    result as List<Object?>;
    return FlutterApiNewsEntity(
      title: result[0] as String?,
    );
  }
}

class _FlutterNewsApiCodec extends StandardMessageCodec {
  const _FlutterNewsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FlutterApiNewsEntity) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FlutterApiNewsEntity.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterNewsApi {
  static const MessageCodec<Object?> codec = _FlutterNewsApiCodec();

  Future<List<FlutterApiNewsEntity?>> getNews();

  static void setup(FlutterNewsApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterNewsApi.getNews', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          final List<FlutterApiNewsEntity?> output = await api.getNews();
          return output;
        });
      }
    }
  }
}
